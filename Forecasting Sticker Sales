{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "81cf528c",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:30.827244Z",
     "iopub.status.busy": "2025-01-15T05:03:30.826744Z",
     "iopub.status.idle": "2025-01-15T05:03:31.818352Z",
     "shell.execute_reply": "2025-01-15T05:03:31.816807Z"
    },
    "papermill": {
     "duration": 1.001692,
     "end_time": "2025-01-15T05:03:31.820749",
     "exception": false,
     "start_time": "2025-01-15T05:03:30.819057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e1/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e1/train.csv\n",
      "/kaggle/input/playground-series-s5e1/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cc59bd67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:31.834674Z",
     "iopub.status.busy": "2025-01-15T05:03:31.834059Z",
     "iopub.status.idle": "2025-01-15T05:03:46.294061Z",
     "shell.execute_reply": "2025-01-15T05:03:46.292543Z"
    },
    "papermill": {
     "duration": 14.469161,
     "end_time": "2025-01-15T05:03:46.296263",
     "exception": false,
     "start_time": "2025-01-15T05:03:31.827102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler\n",
    "from keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Input\n",
    "from keras.optimizers import Adam\n",
    "from keras.regularizers import l2\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "import seaborn as sns\n",
    "import joblib\n",
    "from keras.initializers import glorot_uniform\n",
    "from tensorflow.keras.regularizers import l2\n",
    "import random\n",
    "import keras_tuner as kt\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.metrics import r2_score\n",
    "from tensorflow.keras.callbacks import ReduceLROnPlateau"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3539ee",
   "metadata": {
    "papermill": {
     "duration": 0.005356,
     "end_time": "2025-01-15T05:03:46.307579",
     "exception": false,
     "start_time": "2025-01-15T05:03:46.302223",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4da790f6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:46.320885Z",
     "iopub.status.busy": "2025-01-15T05:03:46.320035Z",
     "iopub.status.idle": "2025-01-15T05:03:46.846153Z",
     "shell.execute_reply": "2025-01-15T05:03:46.844744Z"
    },
    "papermill": {
     "duration": 0.53558,
     "end_time": "2025-01-15T05:03:46.848784",
     "exception": false,
     "start_time": "2025-01-15T05:03:46.313204",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#load Traning data\n",
    "df_train=pd.read_csv('/kaggle/input/playground-series-s5e1/train.csv')\n",
    "df_test=pd.read_csv('/kaggle/input/playground-series-s5e1/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b2f0b7b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:46.862418Z",
     "iopub.status.busy": "2025-01-15T05:03:46.862047Z",
     "iopub.status.idle": "2025-01-15T05:03:46.886122Z",
     "shell.execute_reply": "2025-01-15T05:03:46.884552Z"
    },
    "papermill": {
     "duration": 0.033478,
     "end_time": "2025-01-15T05:03:46.888681",
     "exception": false,
     "start_time": "2025-01-15T05:03:46.855203",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Holographic Goose</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler</td>\n",
       "      <td>423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler Dark Mode</td>\n",
       "      <td>491.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id        date country              store             product  num_sold\n",
       "0   0  2010-01-01  Canada  Discount Stickers   Holographic Goose       NaN\n",
       "1   1  2010-01-01  Canada  Discount Stickers              Kaggle     973.0\n",
       "2   2  2010-01-01  Canada  Discount Stickers        Kaggle Tiers     906.0\n",
       "3   3  2010-01-01  Canada  Discount Stickers            Kerneler     423.0\n",
       "4   4  2010-01-01  Canada  Discount Stickers  Kerneler Dark Mode     491.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2b77b095",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:46.902374Z",
     "iopub.status.busy": "2025-01-15T05:03:46.901920Z",
     "iopub.status.idle": "2025-01-15T05:03:46.909571Z",
     "shell.execute_reply": "2025-01-15T05:03:46.907819Z"
    },
    "papermill": {
     "duration": 0.016968,
     "end_time": "2025-01-15T05:03:46.911930",
     "exception": false,
     "start_time": "2025-01-15T05:03:46.894962",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(98550, 5)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8b8ff908",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:46.928909Z",
     "iopub.status.busy": "2025-01-15T05:03:46.928398Z",
     "iopub.status.idle": "2025-01-15T05:03:46.935594Z",
     "shell.execute_reply": "2025-01-15T05:03:46.934359Z"
    },
    "papermill": {
     "duration": 0.01901,
     "end_time": "2025-01-15T05:03:46.937478",
     "exception": false,
     "start_time": "2025-01-15T05:03:46.918468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(230130, 6)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fc62dd66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:46.952077Z",
     "iopub.status.busy": "2025-01-15T05:03:46.951581Z",
     "iopub.status.idle": "2025-01-15T05:03:47.008689Z",
     "shell.execute_reply": "2025-01-15T05:03:47.007146Z"
    },
    "papermill": {
     "duration": 0.067054,
     "end_time": "2025-01-15T05:03:47.011266",
     "exception": false,
     "start_time": "2025-01-15T05:03:46.944212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>230130.000000</td>\n",
       "      <td>221259.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>115064.500000</td>\n",
       "      <td>752.527382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>66432.953062</td>\n",
       "      <td>690.165445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>57532.250000</td>\n",
       "      <td>219.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>115064.500000</td>\n",
       "      <td>605.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>172596.750000</td>\n",
       "      <td>1114.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>230129.000000</td>\n",
       "      <td>5939.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  id       num_sold\n",
       "count  230130.000000  221259.000000\n",
       "mean   115064.500000     752.527382\n",
       "std     66432.953062     690.165445\n",
       "min         0.000000       5.000000\n",
       "25%     57532.250000     219.000000\n",
       "50%    115064.500000     605.000000\n",
       "75%    172596.750000    1114.000000\n",
       "max    230129.000000    5939.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "70e87be0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.025393Z",
     "iopub.status.busy": "2025-01-15T05:03:47.024921Z",
     "iopub.status.idle": "2025-01-15T05:03:47.103702Z",
     "shell.execute_reply": "2025-01-15T05:03:47.101933Z"
    },
    "papermill": {
     "duration": 0.088214,
     "end_time": "2025-01-15T05:03:47.105818",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.017604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 230130 entries, 0 to 230129\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count   Dtype  \n",
      "---  ------    --------------   -----  \n",
      " 0   id        230130 non-null  int64  \n",
      " 1   date      230130 non-null  object \n",
      " 2   country   230130 non-null  object \n",
      " 3   store     230130 non-null  object \n",
      " 4   product   230130 non-null  object \n",
      " 5   num_sold  221259 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(4)\n",
      "memory usage: 10.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cceeedaa",
   "metadata": {
    "papermill": {
     "duration": 0.005917,
     "end_time": "2025-01-15T05:03:47.118255",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.112338",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "85f5eb80",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.132167Z",
     "iopub.status.busy": "2025-01-15T05:03:47.131705Z",
     "iopub.status.idle": "2025-01-15T05:03:47.185121Z",
     "shell.execute_reply": "2025-01-15T05:03:47.183660Z"
    },
    "papermill": {
     "duration": 0.062906,
     "end_time": "2025-01-15T05:03:47.187250",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.124344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num_sold    8871\n",
       "id             0\n",
       "date           0\n",
       "country        0\n",
       "store          0\n",
       "product        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "45c58e88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.202146Z",
     "iopub.status.busy": "2025-01-15T05:03:47.201631Z",
     "iopub.status.idle": "2025-01-15T05:03:47.231460Z",
     "shell.execute_reply": "2025-01-15T05:03:47.230025Z"
    },
    "papermill": {
     "duration": 0.03989,
     "end_time": "2025-01-15T05:03:47.233605",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.193715",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id         0\n",
       "date       0\n",
       "country    0\n",
       "store      0\n",
       "product    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9db18f37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.249822Z",
     "iopub.status.busy": "2025-01-15T05:03:47.249432Z",
     "iopub.status.idle": "2025-01-15T05:03:47.476575Z",
     "shell.execute_reply": "2025-01-15T05:03:47.475274Z"
    },
    "papermill": {
     "duration": 0.23822,
     "end_time": "2025-01-15T05:03:47.478795",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.240575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id          0\n",
       "date        0\n",
       "country     0\n",
       "store       0\n",
       "product     0\n",
       "num_sold    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train = df_train.bfill()\n",
    "df_test = df_test.bfill()\n",
    "df_train.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3f649b90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.496581Z",
     "iopub.status.busy": "2025-01-15T05:03:47.496164Z",
     "iopub.status.idle": "2025-01-15T05:03:47.693580Z",
     "shell.execute_reply": "2025-01-15T05:03:47.692055Z"
    },
    "papermill": {
     "duration": 0.20956,
     "end_time": "2025-01-15T05:03:47.696254",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.486694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230125</th>\n",
       "      <td>230125</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>466.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230126</th>\n",
       "      <td>230126</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2907.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230127</th>\n",
       "      <td>230127</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230128</th>\n",
       "      <td>230128</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1242.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230129</th>\n",
       "      <td>230129</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1622.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>230130 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id        date  country  store  product  num_sold\n",
       "0            0  2010-01-01        0      0        0     973.0\n",
       "1            1  2010-01-01        0      0        1     973.0\n",
       "2            2  2010-01-01        0      0        2     906.0\n",
       "3            3  2010-01-01        0      0        3     423.0\n",
       "4            4  2010-01-01        0      0        4     491.0\n",
       "...        ...         ...      ...    ...      ...       ...\n",
       "230125  230125  2016-12-31        5      1        0     466.0\n",
       "230126  230126  2016-12-31        5      1        1    2907.0\n",
       "230127  230127  2016-12-31        5      1        2    2299.0\n",
       "230128  230128  2016-12-31        5      1        3    1242.0\n",
       "230129  230129  2016-12-31        5      1        4    1622.0\n",
       "\n",
       "[230130 rows x 6 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode categorical features\n",
    "encoder = LabelEncoder()\n",
    "for col in ['country', 'store', 'product']:\n",
    "    df_train[col] = encoder.fit_transform(df_train[col].astype(str))\n",
    "    df_test[col] = encoder.fit_transform(df_test[col].astype(str))\n",
    "df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6fbeae4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.712358Z",
     "iopub.status.busy": "2025-01-15T05:03:47.711938Z",
     "iopub.status.idle": "2025-01-15T05:03:47.737610Z",
     "shell.execute_reply": "2025-01-15T05:03:47.735830Z"
    },
    "papermill": {
     "duration": 0.035718,
     "end_time": "2025-01-15T05:03:47.739632",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.703914",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 230130 entries, 0 to 230129\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count   Dtype  \n",
      "---  ------    --------------   -----  \n",
      " 0   id        230130 non-null  int64  \n",
      " 1   date      230130 non-null  object \n",
      " 2   country   230130 non-null  int64  \n",
      " 3   store     230130 non-null  int64  \n",
      " 4   product   230130 non-null  int64  \n",
      " 5   num_sold  230130 non-null  float64\n",
      "dtypes: float64(1), int64(4), object(1)\n",
      "memory usage: 10.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c4ecdf97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.755381Z",
     "iopub.status.busy": "2025-01-15T05:03:47.754944Z",
     "iopub.status.idle": "2025-01-15T05:03:47.766585Z",
     "shell.execute_reply": "2025-01-15T05:03:47.764957Z"
    },
    "papermill": {
     "duration": 0.021986,
     "end_time": "2025-01-15T05:03:47.768598",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.746612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230130</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>230131</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>230132</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>230133</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230134</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id        date  country  store  product\n",
       "0  230130  2017-01-01        0      0        0\n",
       "1  230131  2017-01-01        0      0        1\n",
       "2  230132  2017-01-01        0      0        2\n",
       "3  230133  2017-01-01        0      0        3\n",
       "4  230134  2017-01-01        0      0        4"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e3728ed",
   "metadata": {
    "papermill": {
     "duration": 0.007059,
     "end_time": "2025-01-15T05:03:47.783451",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.776392",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prepare training and testing data for modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "66de16a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.800964Z",
     "iopub.status.busy": "2025-01-15T05:03:47.800512Z",
     "iopub.status.idle": "2025-01-15T05:03:47.827502Z",
     "shell.execute_reply": "2025-01-15T05:03:47.826022Z"
    },
    "papermill": {
     "duration": 0.038534,
     "end_time": "2025-01-15T05:03:47.829762",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.791228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230125</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230126</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230127</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230128</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230129</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>230130 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        country  store  product\n",
       "0             0      0        0\n",
       "1             0      0        1\n",
       "2             0      0        2\n",
       "3             0      0        3\n",
       "4             0      0        4\n",
       "...         ...    ...      ...\n",
       "230125        5      1        0\n",
       "230126        5      1        1\n",
       "230127        5      1        2\n",
       "230128        5      1        3\n",
       "230129        5      1        4\n",
       "\n",
       "[230130 rows x 3 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Prepare features and target\n",
    "X = df_train.drop(columns=['id', 'date', 'num_sold'])\n",
    "y = df_train['num_sold'].astype(int)\n",
    "\n",
    "X_pred = df_test.drop(columns=['id', 'date'])\n",
    "\n",
    "\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0a102f8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.847465Z",
     "iopub.status.busy": "2025-01-15T05:03:47.847024Z",
     "iopub.status.idle": "2025-01-15T05:03:47.899602Z",
     "shell.execute_reply": "2025-01-15T05:03:47.898201Z"
    },
    "papermill": {
     "duration": 0.064026,
     "end_time": "2025-01-15T05:03:47.901795",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.837769",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split data\n",
    "# Initial split into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4d126595",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.918661Z",
     "iopub.status.busy": "2025-01-15T05:03:47.918198Z",
     "iopub.status.idle": "2025-01-15T05:03:47.932210Z",
     "shell.execute_reply": "2025-01-15T05:03:47.930775Z"
    },
    "papermill": {
     "duration": 0.024749,
     "end_time": "2025-01-15T05:03:47.934414",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.909665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Ensure all data types are correct\n",
    "X_train = X_train.astype(float)\n",
    "#X_val = X_val.astype(float)\n",
    "X_test = X_test.astype(float)\n",
    "y_train = y_train.astype(float)\n",
    "#y_val = y_val.astype(float)\n",
    "y_test = y_test.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7dd30f89",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.951220Z",
     "iopub.status.busy": "2025-01-15T05:03:47.950749Z",
     "iopub.status.idle": "2025-01-15T05:03:47.957328Z",
     "shell.execute_reply": "2025-01-15T05:03:47.956046Z"
    },
    "papermill": {
     "duration": 0.017074,
     "end_time": "2025-01-15T05:03:47.959143",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.942069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(207117,)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7999638f",
   "metadata": {
    "papermill": {
     "duration": 0.007965,
     "end_time": "2025-01-15T05:03:47.974817",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.966852",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a764852b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:47.991434Z",
     "iopub.status.busy": "2025-01-15T05:03:47.990983Z",
     "iopub.status.idle": "2025-01-15T05:03:48.142124Z",
     "shell.execute_reply": "2025-01-15T05:03:48.140881Z"
    },
    "papermill": {
     "duration": 0.161633,
     "end_time": "2025-01-15T05:03:48.143924",
     "exception": false,
     "start_time": "2025-01-15T05:03:47.982291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)                │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,096</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">262,400</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)                │           \u001b[38;5;34m4,096\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │         \u001b[38;5;34m262,400\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m32,896\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │             \u001b[38;5;34m129\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">299,521</span> (1.14 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m299,521\u001b[0m (1.14 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">299,521</span> (1.14 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m299,521\u001b[0m (1.14 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the model\n",
    "model = Sequential()\n",
    "\n",
    "# Add the input layer with specified shape\n",
    "model.add(Input(shape=(X_train.shape[1],)))\n",
    "\n",
    "# Add Dense layers with Xavier initialization and Dropout for regularization\n",
    "model.add(Dense(1024, activation='relu', kernel_initializer=glorot_uniform(), kernel_regularizer=l2(0.1)))\n",
    "#model.add(Dropout(0.5))  \n",
    "model.add(Dense(256, activation='relu', kernel_regularizer=l2(0.1), kernel_initializer=glorot_uniform()))\n",
    "#model.add(Dropout(0.5))  \n",
    "model.add(Dense(128, activation='relu', kernel_regularizer=l2(0.1), kernel_initializer=glorot_uniform()))\n",
    "#model.add(Dropout(0.5))  \n",
    "\n",
    "# Output layer for binary classification\n",
    "model.add(Dense(1, activation='linear', kernel_initializer=glorot_uniform()))\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83a7a0b6",
   "metadata": {
    "papermill": {
     "duration": 0.007916,
     "end_time": "2025-01-15T05:03:48.160654",
     "exception": false,
     "start_time": "2025-01-15T05:03:48.152738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "bed91cad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:48.179162Z",
     "iopub.status.busy": "2025-01-15T05:03:48.178675Z",
     "iopub.status.idle": "2025-01-15T05:03:48.198194Z",
     "shell.execute_reply": "2025-01-15T05:03:48.196671Z"
    },
    "papermill": {
     "duration": 0.031341,
     "end_time": "2025-01-15T05:03:48.200426",
     "exception": false,
     "start_time": "2025-01-15T05:03:48.169085",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer = Adam(learning_rate=0.01), loss='mse')\n",
    "\n",
    "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=10)\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7449c3e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:03:48.218791Z",
     "iopub.status.busy": "2025-01-15T05:03:48.218360Z",
     "iopub.status.idle": "2025-01-15T05:25:33.687690Z",
     "shell.execute_reply": "2025-01-15T05:25:33.686395Z"
    },
    "papermill": {
     "duration": 1305.481158,
     "end_time": "2025-01-15T05:25:33.689944",
     "exception": false,
     "start_time": "2025-01-15T05:03:48.208786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 7ms/step - loss: 195571.5938 - val_loss: 42941.2852 - learning_rate: 0.0100\n",
      "Epoch 2/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 42282.7031 - val_loss: 36136.5977 - learning_rate: 0.0100\n",
      "Epoch 3/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 39865.2070 - val_loss: 35820.4453 - learning_rate: 0.0100\n",
      "Epoch 4/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 36955.4648 - val_loss: 36940.1562 - learning_rate: 0.0100\n",
      "Epoch 5/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 8ms/step - loss: 36644.5273 - val_loss: 36211.5000 - learning_rate: 0.0100\n",
      "Epoch 6/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 7ms/step - loss: 35902.4531 - val_loss: 35947.3125 - learning_rate: 0.0100\n",
      "Epoch 7/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 7ms/step - loss: 36454.5820 - val_loss: 35967.0742 - learning_rate: 0.0100\n",
      "Epoch 8/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 8ms/step - loss: 36127.6328 - val_loss: 35106.2305 - learning_rate: 0.0100\n",
      "Epoch 9/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 8ms/step - loss: 35778.5469 - val_loss: 34567.9922 - learning_rate: 0.0100\n",
      "Epoch 10/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 8ms/step - loss: 35914.9688 - val_loss: 35532.5625 - learning_rate: 0.0100\n",
      "Epoch 11/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 8ms/step - loss: 34857.9297 - val_loss: 38529.7383 - learning_rate: 0.0100\n",
      "Epoch 12/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 8ms/step - loss: 35326.9570 - val_loss: 34988.2227 - learning_rate: 0.0100\n",
      "Epoch 13/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34838.5352 - val_loss: 34340.5586 - learning_rate: 0.0100\n",
      "Epoch 14/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 7ms/step - loss: 34501.9688 - val_loss: 35318.8672 - learning_rate: 0.0100\n",
      "Epoch 15/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34710.4414 - val_loss: 34500.3984 - learning_rate: 0.0100\n",
      "Epoch 16/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34766.8789 - val_loss: 35878.4961 - learning_rate: 0.0100\n",
      "Epoch 17/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34586.4414 - val_loss: 36893.0703 - learning_rate: 0.0100\n",
      "Epoch 18/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34433.5195 - val_loss: 34212.9609 - learning_rate: 0.0100\n",
      "Epoch 19/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34556.8789 - val_loss: 34113.4297 - learning_rate: 0.0100\n",
      "Epoch 20/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34929.4102 - val_loss: 34046.4102 - learning_rate: 0.0100\n",
      "Epoch 21/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34867.5625 - val_loss: 35157.4805 - learning_rate: 0.0100\n",
      "Epoch 22/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34526.3945 - val_loss: 34333.7148 - learning_rate: 0.0100\n",
      "Epoch 23/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34128.0000 - val_loss: 34479.6016 - learning_rate: 0.0100\n",
      "Epoch 24/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 8ms/step - loss: 34694.0117 - val_loss: 34045.0586 - learning_rate: 0.0100\n",
      "Epoch 25/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 8ms/step - loss: 34866.6445 - val_loss: 35010.4336 - learning_rate: 0.0100\n",
      "Epoch 26/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 7ms/step - loss: 34410.5117 - val_loss: 34434.8789 - learning_rate: 0.0100\n",
      "Epoch 27/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34771.9688 - val_loss: 34059.5312 - learning_rate: 0.0100\n",
      "Epoch 28/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 7ms/step - loss: 34476.0859 - val_loss: 34505.6055 - learning_rate: 0.0100\n",
      "Epoch 29/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 7ms/step - loss: 34587.8320 - val_loss: 34053.8086 - learning_rate: 0.0100\n",
      "Epoch 30/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 7ms/step - loss: 34647.8242 - val_loss: 34672.6562 - learning_rate: 0.0100\n",
      "Epoch 31/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 7ms/step - loss: 34352.7148 - val_loss: 34635.3398 - learning_rate: 0.0100\n",
      "Epoch 32/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 7ms/step - loss: 34427.3164 - val_loss: 34093.4180 - learning_rate: 0.0100\n",
      "Epoch 33/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 7ms/step - loss: 34703.3516 - val_loss: 34843.4023 - learning_rate: 0.0100\n",
      "Epoch 34/1000\n",
      "\u001b[1m5178/5178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 7ms/step - loss: 34104.6680 - val_loss: 34645.1914 - learning_rate: 0.0100\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(X_train, y_train, epochs=1000, verbose=1, validation_split=0.2, callbacks=[reduce_lr, early_stopping])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6706ed26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:25:36.426645Z",
     "iopub.status.busy": "2025-01-15T05:25:36.426283Z",
     "iopub.status.idle": "2025-01-15T05:25:38.272605Z",
     "shell.execute_reply": "2025-01-15T05:25:38.271026Z"
    },
    "papermill": {
     "duration": 3.215574,
     "end_time": "2025-01-15T05:25:38.274795",
     "exception": false,
     "start_time": "2025-01-15T05:25:35.059221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m720/720\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "R² Score: 0.9288228924842743\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Calculate R² score\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(f\"R² Score: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d305c3e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:25:40.918734Z",
     "iopub.status.busy": "2025-01-15T05:25:40.918297Z",
     "iopub.status.idle": "2025-01-15T05:25:41.240305Z",
     "shell.execute_reply": "2025-01-15T05:25:41.238929Z"
    },
    "papermill": {
     "duration": 1.696797,
     "end_time": "2025-01-15T05:25:41.242507",
     "exception": false,
     "start_time": "2025-01-15T05:25:39.545710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot training & validation loss\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc332366",
   "metadata": {
    "papermill": {
     "duration": 1.476988,
     "end_time": "2025-01-15T05:25:44.087448",
     "exception": false,
     "start_time": "2025-01-15T05:25:42.610460",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fcb87432",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:25:46.791993Z",
     "iopub.status.busy": "2025-01-15T05:25:46.791529Z",
     "iopub.status.idle": "2025-01-15T05:25:54.535218Z",
     "shell.execute_reply": "2025-01-15T05:25:54.533412Z"
    },
    "papermill": {
     "duration": 9.099474,
     "end_time": "2025-01-15T05:25:54.537692",
     "exception": false,
     "start_time": "2025-01-15T05:25:45.438218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m3080/3080\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step\n",
      "98550 98550\n"
     ]
    }
   ],
   "source": [
    "submission_id = df_test.id\n",
    "y_prediction = model.predict(X_pred)\n",
    "y_prediction = np.round(y_prediction)\n",
    "print(len(submission_id), len(y_prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0a314d9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:25:57.258464Z",
     "iopub.status.busy": "2025-01-15T05:25:57.258076Z",
     "iopub.status.idle": "2025-01-15T05:25:57.269961Z",
     "shell.execute_reply": "2025-01-15T05:25:57.268668Z"
    },
    "papermill": {
     "duration": 1.363816,
     "end_time": "2025-01-15T05:25:57.272188",
     "exception": false,
     "start_time": "2025-01-15T05:25:55.908372",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230130</td>\n",
       "      <td>703.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>230131</td>\n",
       "      <td>719.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>230132</td>\n",
       "      <td>616.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>230133</td>\n",
       "      <td>310.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230134</td>\n",
       "      <td>360.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  num_sold\n",
       "0  230130     703.0\n",
       "1  230131     719.0\n",
       "2  230132     616.0\n",
       "3  230133     310.0\n",
       "4  230134     360.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_id = df_test.id\n",
    "output = pd.DataFrame({'id': submission_id,\n",
    "                       'num_sold': y_prediction.squeeze()})\n",
    "\n",
    "output.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1e279437",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-15T05:25:59.984390Z",
     "iopub.status.busy": "2025-01-15T05:25:59.984041Z",
     "iopub.status.idle": "2025-01-15T05:26:00.182150Z",
     "shell.execute_reply": "2025-01-15T05:26:00.180823Z"
    },
    "papermill": {
     "duration": 1.554327,
     "end_time": "2025-01-15T05:26:00.184271",
     "exception": false,
     "start_time": "2025-01-15T05:25:58.629944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230130</td>\n",
       "      <td>703.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>230131</td>\n",
       "      <td>719.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>230132</td>\n",
       "      <td>616.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>230133</td>\n",
       "      <td>310.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230134</td>\n",
       "      <td>360.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  num_sold\n",
       "0  230130     703.0\n",
       "1  230131     719.0\n",
       "2  230132     616.0\n",
       "3  230133     310.0\n",
       "4  230134     360.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission_df = pd.read_csv('/kaggle/input/playground-series-s5e1/sample_submission.csv')\n",
    "sample_submission_df['num_sold'] = y_prediction\n",
    "sample_submission_df.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "sample_submission_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f010295e",
   "metadata": {
    "papermill": {
     "duration": 1.405504,
     "end_time": "2025-01-15T05:26:03.008694",
     "exception": false,
     "start_time": "2025-01-15T05:26:01.603190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10652996,
     "sourceId": 85723,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30823,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1359.376235,
   "end_time": "2025-01-15T05:26:06.992612",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-15T05:03:27.616377",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
