{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3dbdfa52",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:26.792583Z",
     "iopub.status.busy": "2025-01-16T01:51:26.792100Z",
     "iopub.status.idle": "2025-01-16T01:51:27.755826Z",
     "shell.execute_reply": "2025-01-16T01:51:27.754390Z"
    },
    "papermill": {
     "duration": 0.974262,
     "end_time": "2025-01-16T01:51:27.758140",
     "exception": false,
     "start_time": "2025-01-16T01:51:26.783878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e1/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e1/train.csv\n",
      "/kaggle/input/playground-series-s5e1/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a553cf4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:27.782956Z",
     "iopub.status.busy": "2025-01-16T01:51:27.782459Z",
     "iopub.status.idle": "2025-01-16T01:51:40.854020Z",
     "shell.execute_reply": "2025-01-16T01:51:40.852718Z"
    },
    "papermill": {
     "duration": 13.086003,
     "end_time": "2025-01-16T01:51:40.856329",
     "exception": false,
     "start_time": "2025-01-16T01:51:27.770326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder, MinMaxScaler\n",
    "from keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Dropout, Input\n",
    "from keras.optimizers import Adam\n",
    "from keras.regularizers import l2\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "import seaborn as sns\n",
    "import joblib\n",
    "from keras.initializers import glorot_uniform\n",
    "from tensorflow.keras.regularizers import l2\n",
    "import random\n",
    "import keras_tuner as kt\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.metrics import r2_score\n",
    "from tensorflow.keras.callbacks import ReduceLROnPlateau"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d590b0a",
   "metadata": {
    "papermill": {
     "duration": 0.005791,
     "end_time": "2025-01-16T01:51:40.869864",
     "exception": false,
     "start_time": "2025-01-16T01:51:40.864073",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fbee1d39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:40.884116Z",
     "iopub.status.busy": "2025-01-16T01:51:40.883491Z",
     "iopub.status.idle": "2025-01-16T01:51:41.379347Z",
     "shell.execute_reply": "2025-01-16T01:51:41.378251Z"
    },
    "papermill": {
     "duration": 0.505502,
     "end_time": "2025-01-16T01:51:41.381413",
     "exception": false,
     "start_time": "2025-01-16T01:51:40.875911",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#load Traning data\n",
    "df_train=pd.read_csv('/kaggle/input/playground-series-s5e1/train.csv')\n",
    "df_test=pd.read_csv('/kaggle/input/playground-series-s5e1/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "087d8634",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.395152Z",
     "iopub.status.busy": "2025-01-16T01:51:41.394712Z",
     "iopub.status.idle": "2025-01-16T01:51:41.417132Z",
     "shell.execute_reply": "2025-01-16T01:51:41.416019Z"
    },
    "papermill": {
     "duration": 0.031046,
     "end_time": "2025-01-16T01:51:41.418813",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.387767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Holographic Goose</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kaggle Tiers</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler</td>\n",
       "      <td>423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Discount Stickers</td>\n",
       "      <td>Kerneler Dark Mode</td>\n",
       "      <td>491.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id        date country              store             product  num_sold\n",
       "0   0  2010-01-01  Canada  Discount Stickers   Holographic Goose       NaN\n",
       "1   1  2010-01-01  Canada  Discount Stickers              Kaggle     973.0\n",
       "2   2  2010-01-01  Canada  Discount Stickers        Kaggle Tiers     906.0\n",
       "3   3  2010-01-01  Canada  Discount Stickers            Kerneler     423.0\n",
       "4   4  2010-01-01  Canada  Discount Stickers  Kerneler Dark Mode     491.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0f19ac67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.432650Z",
     "iopub.status.busy": "2025-01-16T01:51:41.432251Z",
     "iopub.status.idle": "2025-01-16T01:51:41.438037Z",
     "shell.execute_reply": "2025-01-16T01:51:41.437039Z"
    },
    "papermill": {
     "duration": 0.014487,
     "end_time": "2025-01-16T01:51:41.439693",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.425206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(98550, 5)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae7ec24c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.453998Z",
     "iopub.status.busy": "2025-01-16T01:51:41.453644Z",
     "iopub.status.idle": "2025-01-16T01:51:41.459465Z",
     "shell.execute_reply": "2025-01-16T01:51:41.458384Z"
    },
    "papermill": {
     "duration": 0.015188,
     "end_time": "2025-01-16T01:51:41.461356",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.446168",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(230130, 6)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7e2e6fcc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.475399Z",
     "iopub.status.busy": "2025-01-16T01:51:41.475021Z",
     "iopub.status.idle": "2025-01-16T01:51:41.514692Z",
     "shell.execute_reply": "2025-01-16T01:51:41.513605Z"
    },
    "papermill": {
     "duration": 0.048918,
     "end_time": "2025-01-16T01:51:41.516717",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.467799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>230130.000000</td>\n",
       "      <td>221259.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>115064.500000</td>\n",
       "      <td>752.527382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>66432.953062</td>\n",
       "      <td>690.165445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>57532.250000</td>\n",
       "      <td>219.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>115064.500000</td>\n",
       "      <td>605.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>172596.750000</td>\n",
       "      <td>1114.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>230129.000000</td>\n",
       "      <td>5939.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  id       num_sold\n",
       "count  230130.000000  221259.000000\n",
       "mean   115064.500000     752.527382\n",
       "std     66432.953062     690.165445\n",
       "min         0.000000       5.000000\n",
       "25%     57532.250000     219.000000\n",
       "50%    115064.500000     605.000000\n",
       "75%    172596.750000    1114.000000\n",
       "max    230129.000000    5939.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ddf9a67d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.532463Z",
     "iopub.status.busy": "2025-01-16T01:51:41.532039Z",
     "iopub.status.idle": "2025-01-16T01:51:41.597636Z",
     "shell.execute_reply": "2025-01-16T01:51:41.596436Z"
    },
    "papermill": {
     "duration": 0.074922,
     "end_time": "2025-01-16T01:51:41.599358",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.524436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 230130 entries, 0 to 230129\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count   Dtype  \n",
      "---  ------    --------------   -----  \n",
      " 0   id        230130 non-null  int64  \n",
      " 1   date      230130 non-null  object \n",
      " 2   country   230130 non-null  object \n",
      " 3   store     230130 non-null  object \n",
      " 4   product   230130 non-null  object \n",
      " 5   num_sold  221259 non-null  float64\n",
      "dtypes: float64(1), int64(1), object(4)\n",
      "memory usage: 10.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e0301b0",
   "metadata": {
    "papermill": {
     "duration": 0.00659,
     "end_time": "2025-01-16T01:51:41.612609",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.606019",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Data cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "33814859",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.626622Z",
     "iopub.status.busy": "2025-01-16T01:51:41.626216Z",
     "iopub.status.idle": "2025-01-16T01:51:41.676640Z",
     "shell.execute_reply": "2025-01-16T01:51:41.675554Z"
    },
    "papermill": {
     "duration": 0.059555,
     "end_time": "2025-01-16T01:51:41.678446",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.618891",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "num_sold    8871\n",
       "id             0\n",
       "date           0\n",
       "country        0\n",
       "store          0\n",
       "product        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "857b75e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.693627Z",
     "iopub.status.busy": "2025-01-16T01:51:41.693126Z",
     "iopub.status.idle": "2025-01-16T01:51:41.718836Z",
     "shell.execute_reply": "2025-01-16T01:51:41.717860Z"
    },
    "papermill": {
     "duration": 0.035204,
     "end_time": "2025-01-16T01:51:41.720607",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.685403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id         0\n",
       "date       0\n",
       "country    0\n",
       "store      0\n",
       "product    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "559395d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.735414Z",
     "iopub.status.busy": "2025-01-16T01:51:41.734966Z",
     "iopub.status.idle": "2025-01-16T01:51:41.963744Z",
     "shell.execute_reply": "2025-01-16T01:51:41.962387Z"
    },
    "papermill": {
     "duration": 0.238622,
     "end_time": "2025-01-16T01:51:41.965973",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.727351",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id          0\n",
       "date        0\n",
       "country     0\n",
       "store       0\n",
       "product     0\n",
       "num_sold    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train = df_train.bfill()\n",
    "df_test = df_test.bfill()\n",
    "df_train.isnull().sum().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c9d7dd41",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:41.981879Z",
     "iopub.status.busy": "2025-01-16T01:51:41.981467Z",
     "iopub.status.idle": "2025-01-16T01:51:42.175968Z",
     "shell.execute_reply": "2025-01-16T01:51:42.174678Z"
    },
    "papermill": {
     "duration": 0.204233,
     "end_time": "2025-01-16T01:51:42.177741",
     "exception": false,
     "start_time": "2025-01-16T01:51:41.973508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>973.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>906.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>423.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>491.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230125</th>\n",
       "      <td>230125</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>466.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230126</th>\n",
       "      <td>230126</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2907.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230127</th>\n",
       "      <td>230127</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230128</th>\n",
       "      <td>230128</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1242.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230129</th>\n",
       "      <td>230129</td>\n",
       "      <td>2016-12-31</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1622.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>230130 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id        date  country  store  product  num_sold\n",
       "0            0  2010-01-01        0      0        0     973.0\n",
       "1            1  2010-01-01        0      0        1     973.0\n",
       "2            2  2010-01-01        0      0        2     906.0\n",
       "3            3  2010-01-01        0      0        3     423.0\n",
       "4            4  2010-01-01        0      0        4     491.0\n",
       "...        ...         ...      ...    ...      ...       ...\n",
       "230125  230125  2016-12-31        5      1        0     466.0\n",
       "230126  230126  2016-12-31        5      1        1    2907.0\n",
       "230127  230127  2016-12-31        5      1        2    2299.0\n",
       "230128  230128  2016-12-31        5      1        3    1242.0\n",
       "230129  230129  2016-12-31        5      1        4    1622.0\n",
       "\n",
       "[230130 rows x 6 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode categorical features\n",
    "encoder = LabelEncoder()\n",
    "for col in ['country', 'store', 'product']:\n",
    "    df_train[col] = encoder.fit_transform(df_train[col].astype(str))\n",
    "    df_test[col] = encoder.fit_transform(df_test[col].astype(str))\n",
    "df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6a99dcb3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.193552Z",
     "iopub.status.busy": "2025-01-16T01:51:42.193146Z",
     "iopub.status.idle": "2025-01-16T01:51:42.215635Z",
     "shell.execute_reply": "2025-01-16T01:51:42.214404Z"
    },
    "papermill": {
     "duration": 0.032489,
     "end_time": "2025-01-16T01:51:42.217599",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.185110",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 230130 entries, 0 to 230129\n",
      "Data columns (total 6 columns):\n",
      " #   Column    Non-Null Count   Dtype  \n",
      "---  ------    --------------   -----  \n",
      " 0   id        230130 non-null  int64  \n",
      " 1   date      230130 non-null  object \n",
      " 2   country   230130 non-null  int64  \n",
      " 3   store     230130 non-null  int64  \n",
      " 4   product   230130 non-null  int64  \n",
      " 5   num_sold  230130 non-null  float64\n",
      "dtypes: float64(1), int64(4), object(1)\n",
      "memory usage: 10.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d10dfabc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.233927Z",
     "iopub.status.busy": "2025-01-16T01:51:42.233584Z",
     "iopub.status.idle": "2025-01-16T01:51:42.243490Z",
     "shell.execute_reply": "2025-01-16T01:51:42.242382Z"
    },
    "papermill": {
     "duration": 0.020305,
     "end_time": "2025-01-16T01:51:42.245155",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.224850",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230130</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>230131</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>230132</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>230133</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230134</td>\n",
       "      <td>2017-01-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id        date  country  store  product\n",
       "0  230130  2017-01-01        0      0        0\n",
       "1  230131  2017-01-01        0      0        1\n",
       "2  230132  2017-01-01        0      0        2\n",
       "3  230133  2017-01-01        0      0        3\n",
       "4  230134  2017-01-01        0      0        4"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fa43441",
   "metadata": {
    "papermill": {
     "duration": 0.007033,
     "end_time": "2025-01-16T01:51:42.259533",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.252500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Prepare training and testing data for modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d4ef3661",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.275712Z",
     "iopub.status.busy": "2025-01-16T01:51:42.275356Z",
     "iopub.status.idle": "2025-01-16T01:51:42.296355Z",
     "shell.execute_reply": "2025-01-16T01:51:42.295051Z"
    },
    "papermill": {
     "duration": 0.031162,
     "end_time": "2025-01-16T01:51:42.298030",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.266868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>store</th>\n",
       "      <th>product</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230125</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230126</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230127</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230128</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230129</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>230130 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        country  store  product\n",
       "0             0      0        0\n",
       "1             0      0        1\n",
       "2             0      0        2\n",
       "3             0      0        3\n",
       "4             0      0        4\n",
       "...         ...    ...      ...\n",
       "230125        5      1        0\n",
       "230126        5      1        1\n",
       "230127        5      1        2\n",
       "230128        5      1        3\n",
       "230129        5      1        4\n",
       "\n",
       "[230130 rows x 3 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Prepare features and target\n",
    "X = df_train.drop(columns=['id', 'date', 'num_sold'])\n",
    "y = df_train['num_sold'].astype(int)\n",
    "\n",
    "X_pred = df_test.drop(columns=['id', 'date'])\n",
    "\n",
    "\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ae99e74c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.314861Z",
     "iopub.status.busy": "2025-01-16T01:51:42.314490Z",
     "iopub.status.idle": "2025-01-16T01:51:42.351667Z",
     "shell.execute_reply": "2025-01-16T01:51:42.350609Z"
    },
    "papermill": {
     "duration": 0.04812,
     "end_time": "2025-01-16T01:51:42.353861",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.305741",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split data\n",
    "# Initial split into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f2955fc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.370348Z",
     "iopub.status.busy": "2025-01-16T01:51:42.369882Z",
     "iopub.status.idle": "2025-01-16T01:51:42.379926Z",
     "shell.execute_reply": "2025-01-16T01:51:42.379069Z"
    },
    "papermill": {
     "duration": 0.020272,
     "end_time": "2025-01-16T01:51:42.381860",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.361588",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Ensure all data types are correct\n",
    "X_train = X_train.astype(float)\n",
    "#X_val = X_val.astype(float)\n",
    "X_test = X_test.astype(float)\n",
    "y_train = y_train.astype(float)\n",
    "#y_val = y_val.astype(float)\n",
    "y_test = y_test.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "efe1f2c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.398277Z",
     "iopub.status.busy": "2025-01-16T01:51:42.397927Z",
     "iopub.status.idle": "2025-01-16T01:51:42.403550Z",
     "shell.execute_reply": "2025-01-16T01:51:42.402627Z"
    },
    "papermill": {
     "duration": 0.015385,
     "end_time": "2025-01-16T01:51:42.404988",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.389603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(207117,)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1e4b25b",
   "metadata": {
    "papermill": {
     "duration": 0.009484,
     "end_time": "2025-01-16T01:51:42.422109",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.412625",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1223a137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.438468Z",
     "iopub.status.busy": "2025-01-16T01:51:42.438002Z",
     "iopub.status.idle": "2025-01-16T01:51:42.546963Z",
     "shell.execute_reply": "2025-01-16T01:51:42.545824Z"
    },
    "papermill": {
     "duration": 0.118938,
     "end_time": "2025-01-16T01:51:42.548645",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.429707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">257</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │           \u001b[38;5;34m2,048\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │         \u001b[38;5;34m131,328\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │             \u001b[38;5;34m257\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">133,633</span> (522.00 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m133,633\u001b[0m (522.00 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">133,633</span> (522.00 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m133,633\u001b[0m (522.00 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the model\n",
    "model = Sequential()\n",
    "\n",
    "# Add the input layer with specified shape\n",
    "model.add(Input(shape=(X_train.shape[1],)))\n",
    "\n",
    "# Add Dense layers with Xavier initialization and Dropout for regularization\n",
    "model.add(Dense(512, activation='relu', kernel_initializer=glorot_uniform(), kernel_regularizer=l2(0.1)))\n",
    "#model.add(Dropout(0.5))  \n",
    "model.add(Dense(256, activation='relu', kernel_regularizer=l2(0.1), kernel_initializer=glorot_uniform()))\n",
    "#model.add(Dropout(0.5))  \n",
    "\n",
    "# Output layer for binary classification\n",
    "model.add(Dense(1, activation='linear', kernel_initializer=glorot_uniform()))\n",
    "\n",
    "# Print model summary\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01f396ab",
   "metadata": {
    "papermill": {
     "duration": 0.007897,
     "end_time": "2025-01-16T01:51:42.565167",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.557270",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6fef4adc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.582847Z",
     "iopub.status.busy": "2025-01-16T01:51:42.582472Z",
     "iopub.status.idle": "2025-01-16T01:51:42.597816Z",
     "shell.execute_reply": "2025-01-16T01:51:42.596413Z"
    },
    "papermill": {
     "duration": 0.026876,
     "end_time": "2025-01-16T01:51:42.600129",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.573253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer = Adam(learning_rate=0.01), loss='mse')\n",
    "\n",
    "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=10)\n",
    "\n",
    "early_stopping = EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fe41d317",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T01:51:42.618257Z",
     "iopub.status.busy": "2025-01-16T01:51:42.617864Z",
     "iopub.status.idle": "2025-01-16T07:03:04.447773Z",
     "shell.execute_reply": "2025-01-16T07:03:04.446421Z"
    },
    "papermill": {
     "duration": 18681.842181,
     "end_time": "2025-01-16T07:03:04.450873",
     "exception": false,
     "start_time": "2025-01-16T01:51:42.608692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "history = model.fit(X_train, y_train, epochs=1000, verbose=0, validation_split=0.2, callbacks=[reduce_lr])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4e812bfc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T07:03:04.472504Z",
     "iopub.status.busy": "2025-01-16T07:03:04.472111Z",
     "iopub.status.idle": "2025-01-16T07:03:05.993431Z",
     "shell.execute_reply": "2025-01-16T07:03:05.992182Z"
    },
    "papermill": {
     "duration": 1.534005,
     "end_time": "2025-01-16T07:03:05.995497",
     "exception": false,
     "start_time": "2025-01-16T07:03:04.461492",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m720/720\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "R² Score: 0.9302573033224486\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Calculate R² score\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(f\"R² Score: {r2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9562db79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T07:03:06.017215Z",
     "iopub.status.busy": "2025-01-16T07:03:06.016804Z",
     "iopub.status.idle": "2025-01-16T07:03:06.282531Z",
     "shell.execute_reply": "2025-01-16T07:03:06.281390Z"
    },
    "papermill": {
     "duration": 0.278206,
     "end_time": "2025-01-16T07:03:06.284214",
     "exception": false,
     "start_time": "2025-01-16T07:03:06.006008",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot training & validation loss\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.title('Model Loss')\n",
    "plt.ylabel('Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3e44535",
   "metadata": {
    "papermill": {
     "duration": 0.010112,
     "end_time": "2025-01-16T07:03:06.305006",
     "exception": false,
     "start_time": "2025-01-16T07:03:06.294894",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "812c9eb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T07:03:06.327995Z",
     "iopub.status.busy": "2025-01-16T07:03:06.327640Z",
     "iopub.status.idle": "2025-01-16T07:03:12.313132Z",
     "shell.execute_reply": "2025-01-16T07:03:12.311865Z"
    },
    "papermill": {
     "duration": 5.99949,
     "end_time": "2025-01-16T07:03:12.315158",
     "exception": false,
     "start_time": "2025-01-16T07:03:06.315668",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m3080/3080\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 1ms/step\n",
      "98550 98550\n"
     ]
    }
   ],
   "source": [
    "submission_id = df_test.id\n",
    "y_prediction = model.predict(X_pred)\n",
    "y_prediction = np.round(y_prediction)\n",
    "print(len(submission_id), len(y_prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "521c7fed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T07:03:12.438075Z",
     "iopub.status.busy": "2025-01-16T07:03:12.437737Z",
     "iopub.status.idle": "2025-01-16T07:03:12.449377Z",
     "shell.execute_reply": "2025-01-16T07:03:12.448158Z"
    },
    "papermill": {
     "duration": 0.029487,
     "end_time": "2025-01-16T07:03:12.450999",
     "exception": false,
     "start_time": "2025-01-16T07:03:12.421512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230130</td>\n",
       "      <td>714.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>230131</td>\n",
       "      <td>719.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>230132</td>\n",
       "      <td>589.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>230133</td>\n",
       "      <td>323.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230134</td>\n",
       "      <td>380.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  num_sold\n",
       "0  230130     714.0\n",
       "1  230131     719.0\n",
       "2  230132     589.0\n",
       "3  230133     323.0\n",
       "4  230134     380.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_id = df_test.id\n",
    "output = pd.DataFrame({'id': submission_id,\n",
    "                       'num_sold': y_prediction.squeeze()})\n",
    "\n",
    "output.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fccef5da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-16T07:03:12.484158Z",
     "iopub.status.busy": "2025-01-16T07:03:12.483811Z",
     "iopub.status.idle": "2025-01-16T07:03:12.680356Z",
     "shell.execute_reply": "2025-01-16T07:03:12.679095Z"
    },
    "papermill": {
     "duration": 0.214852,
     "end_time": "2025-01-16T07:03:12.682184",
     "exception": false,
     "start_time": "2025-01-16T07:03:12.467332",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_sold</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230130</td>\n",
       "      <td>714.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>230131</td>\n",
       "      <td>719.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>230132</td>\n",
       "      <td>589.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>230133</td>\n",
       "      <td>323.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230134</td>\n",
       "      <td>380.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  num_sold\n",
       "0  230130     714.0\n",
       "1  230131     719.0\n",
       "2  230132     589.0\n",
       "3  230133     323.0\n",
       "4  230134     380.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission_df = pd.read_csv('/kaggle/input/playground-series-s5e1/sample_submission.csv')\n",
    "sample_submission_df['num_sold'] = y_prediction\n",
    "sample_submission_df.to_csv('/kaggle/working/submission.csv', index=False)\n",
    "sample_submission_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "093c03a4",
   "metadata": {
    "papermill": {
     "duration": 0.015453,
     "end_time": "2025-01-16T07:03:12.713667",
     "exception": false,
     "start_time": "2025-01-16T07:03:12.698214",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 10652996,
     "sourceId": 85723,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30823,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18711.354581,
   "end_time": "2025-01-16T07:03:15.196853",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-16T01:51:23.842272",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
